class Solution {
public:
    int findTheLongestSubstring(string s) {
        // unordered_map<int, int> m{{0, -1}};
        // int res = 0, n = s.length(), cur = 0;
        // for (int i = 0; i < n; i++) {
        //     cur ^= 1 << string("aeiou").find(s[i]) + 1 >> 1;
        //     if (!m.count(cur)) m[cur] = i;
        //     res = max(res, i - m[cur]);
        // }
        // return res;
        vector<int> mapy(32, -2);
        mapy[0] = -1;

        int maxLen = 0;
        int mask = 0;

        for (int i = 0; i < s.size(); ++i) {
            char ch = s[i];

            switch (ch) {
                case 'a':
                    mask ^= 1;
                    break;
                case 'e':
                    mask ^= 2;
                    break;
                case 'i':
                    mask ^= 4;
                    break;
                case 'o':
                    mask ^= 8;
                    break;
                case 'u':
                    mask ^= 16;
                    break;
            }

            int prev = mapy[mask];
            if (prev == -2) {
                mapy[mask] = i;
            } else {
                maxLen = max(maxLen, i - prev);
            }
        }

        return maxLen;
    }
};
