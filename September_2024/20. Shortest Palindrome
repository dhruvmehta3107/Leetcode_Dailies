class Solution {
public:
    string shortestPalindrome(string s) {
        string rev_s = s;
        reverse(rev_s.begin(), rev_s.end());
        string l = s + "#" + rev_s;
        
        vector<int> p(l.size(), 0);
        for (int i = 1; i < l.size(); i++) {
            int j = p[i - 1];
            while (j > 0 && l[i] != l[j])
                j = p[j - 1];
            p[i] = (j += l[i] == l[j]);
        }
        
        return rev_s.substr(0, s.size() - p[l.size() - 1]) + s;
        // int count = kmp(string(s.rbegin(), s.rend()), s);
        // return string(s.rbegin(), s.rend()).substr(0, s.length() - count) + s;
    }

// private:
//     int kmp(const string &txt, const string &patt) {
//         string newString = patt + '#' + txt;
//         vector<int> pi(newString.length(), 0);
//         int i = 1, k = 0;
//         while (i < newString.length()) {
//             if (newString[i] == newString[k]) {
//                 k++;
//                 pi[i] = k;
//                 i++;
//             } else {
//                 if (k > 0) {
//                     k = pi[k - 1];
//                 } else {
//                     pi[i] = 0;
//                     i++;
//                 }
//             }
//         }
//         return pi.back();
//     }
};
