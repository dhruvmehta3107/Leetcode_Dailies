/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


// ***First Approach - Double pass - T.C.(2N) - S.C.(2N)***
 
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if(root == NULL)
            return root;

        queue<TreeNode*> que;
        que.push(root);
        vector<int> levelSum;

        while(!que.empty()){
            int currLevelSum = 0;
            int n = que.size();
            while(n--){
                TreeNode* curr = que.front();
                que.pop();
                
                currLevelSum += curr->val;
                if(curr->left){
                    que.push(curr->left);
                }
                if(curr->right){
                    que.push(curr->right);
                }
            }
            levelSum.push_back(currLevelSum);
        }

        que.push(root);
        root->val = 0;
        int i = 1;
        while(!que.empty()){
            int n = que.size();
            while(n--){
                TreeNode* curr = que.front();
                que.pop();

                int siblingSum = curr->left != NULL ? curr->left->val : 0;
                siblingSum += curr->right != NULL ? curr->right->val : 0;

                if(curr->left){
                    curr->left->val = levelSum[i] - siblingSum;
                    que.push(curr->left);
                }
                if(curr->right){
                    curr->right->val = levelSum[i] - siblingSum;
                    que.push(curr->right);
                }
            }
            i++;
        }
        return root;
    }
};


 //Second Approach - Single pass - T.C.(N) - S.C.(2N)

 
